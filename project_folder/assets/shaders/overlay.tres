[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeColorOp" id=1]
operator = 4

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 5

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 5

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "screen_uv"

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Input:5

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out6p0.xy);
		n_out3p0 = TEXTURE_tex_read.rgb;
		n_out3p1 = TEXTURE_tex_read.a;
	}

// Input:8
	vec3 n_out8p0 = vec3(SCREEN_UV, 0.0);

// Input:7

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out8p0.xy);
		n_out4p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out4p1 = SCREEN_TEXTURE_tex_read.a;
	}

// ColorOp:2
	vec3 n_out2p0;
	{
		float base = n_out3p0.x;
		float blend = n_out4p0.x;
		if (base < 0.5) {
			n_out2p0.x = 2.0 * base * blend;
		} else {
			n_out2p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out4p0.y;
		if (base < 0.5) {
			n_out2p0.y = 2.0 * base * blend;
		} else {
			n_out2p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out4p0.z;
		if (base < 0.5) {
			n_out2p0.z = 2.0 * base * blend;
		} else {
			n_out2p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -401.344, -13.217 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 360, 180 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 120, 60 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -140, 100 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -140, 260 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -400, 180 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -400, 100 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -400, 380 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -400, 280 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 3, 2, 6, 0, 3, 0, 8, 0, 4, 0, 7, 0, 4, 2, 4, 0, 2, 1, 3, 0, 2, 0, 3, 1, 0, 1 )
